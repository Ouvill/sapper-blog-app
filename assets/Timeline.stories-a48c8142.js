import{S as N,i as q,s as z,h,m as x,t as w,z as B,j as k,b as T,d as f,o as J,k as D,A as O,e as d,f as U,g as i,B as F,p as P,v as G,w as Q,C as V}from"./Component-da64efc3.js";import{T as W}from"./Time-5388fef3.js";function X(s){let e,r,v,o,m,y,l,a,u,c,_,C,S,g,p;return l=new W({props:{date:s[1]}}),{c(){e=h("li"),r=h("span"),v=x(),o=h("h3"),m=w(s[0]),y=x(),B(l.$$.fragment),a=x(),u=h("p"),c=h("a"),_=w(s[3]),C=x(),S=h("p"),g=w(s[2]),this.h()},l(n){e=k(n,"LI",{class:!0});var t=T(e);r=k(t,"SPAN",{class:!0});var b=T(r);b.forEach(f),v=J(t),o=k(t,"H3",{class:!0});var R=T(o);m=D(R,s[0]),R.forEach(f),y=J(t),O(l.$$.fragment,t),a=J(t),u=k(t,"P",{class:!0});var E=T(u);c=k(E,"A",{class:!0,href:!0});var A=T(c);_=D(A,s[3]),A.forEach(f),E.forEach(f),C=J(t),S=k(t,"P",{class:!0});var H=T(S);g=D(H,s[2]),H.forEach(f),t.forEach(f),this.h()},h(){d(r,"class","ring-3 absolute -start-1.5 mt-2 flex h-3 w-3 items-center justify-center rounded-full bg-indigo-700 ring-white dark:ring-gray-900"),d(o,"class","mb-1 flex items-center text-xl font-semibold text-gray-900 dark:text-white"),d(c,"class","no-underline hover:underline"),d(c,"href",s[4]),d(u,"class","mt-2 text-lg font-bold text-indigo-700 dark:text-indigo-400"),d(S,"class","my-2 text-sm font-normal text-gray-500 dark:text-gray-400"),d(e,"class","mb-10 ms-6")},m(n,t){U(n,e,t),i(e,r),i(e,v),i(e,o),i(o,m),i(e,y),F(l,e,null),i(e,a),i(e,u),i(u,c),i(c,_),i(e,C),i(e,S),i(S,g),p=!0},p(n,[t]){(!p||t&1)&&P(m,n[0]);const b={};t&2&&(b.date=n[1]),l.$set(b),(!p||t&8)&&P(_,n[3]),(!p||t&16)&&d(c,"href",n[4]),(!p||t&4)&&P(g,n[2])},i(n){p||(G(l.$$.fragment,n),p=!0)},o(n){Q(l.$$.fragment,n),p=!1},d(n){n&&f(e),V(l)}}}function Y(s,e,r){let{eventTitle:v}=e,{eventDate:o}=e,{description:m}=e,{presentationTitle:y}=e,{presentationLink:l}=e;return s.$$set=a=>{"eventTitle"in a&&r(0,v=a.eventTitle),"eventDate"in a&&r(1,o=a.eventDate),"description"in a&&r(2,m=a.description),"presentationTitle"in a&&r(3,y=a.presentationTitle),"presentationLink"in a&&r(4,l=a.presentationLink)},[v,o,m,y,l]}class I extends N{constructor(e){super(),q(this,e,Y,X,z,{eventTitle:0,eventDate:1,description:2,presentationTitle:3,presentationLink:4})}}I.__docgen={version:3,name:"Timeline.svelte",data:[{visibility:"public",description:null,keywords:[],name:"eventTitle",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"any",type:"any"}},{visibility:"public",description:null,keywords:[],name:"eventDate",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"any",type:"any"}},{visibility:"public",description:null,keywords:[],name:"description",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"any",type:"any"}},{visibility:"public",description:null,keywords:[],name:"presentationTitle",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"any",type:"any"}},{visibility:"public",description:null,keywords:[],name:"presentationLink",kind:"let",static:!1,readonly:!1,type:{kind:"type",text:"any",type:"any"}}],computed:[],methods:[],components:[],description:null,keywords:[],events:[],slots:[],refs:[]};const ee={title:"Timline",component:I,tags:["autodocs"],argTypes:{eventTitle:{control:{type:"text"},describe:"登壇したイベント名"},eventDate:{control:{type:"text"},describe:"登壇したイベントの日付"},presentationTitle:{control:{type:"text"},describe:"登壇資料のタイトル"},presentationLink:{control:{type:"text"},describe:"登壇資料のURL"},description:{control:{type:"text"},describe:"発表内容の概要"}}},L={args:{eventTitle:"JSConf JP 2023",eventDate:"2023-11-19",presentationTitle:"JavaScript なしで動作するモダンなコードの書き方",presentationLink:"https://example.com/",description:"Next.js、Remix、SvelteKit といった近年のフレームワークは、JavaScript がなくても動作することを一つの価値として提供しています。例えばSvelteKit のフォームではプログレッシブエンハンスメントとして、JavaScript が利用できる環境ではリッチなユーザー体験を提供しつつ、JavaScript が使えない環境においては HTML のフォームとして振る舞うことでアプリケーションの機能を変わらず提供できます。 React Server Component はサーバー側で HTML に変換されるため、クライアントに JavaScript のコードが配信されることはありません。React Server Component では useState() を使用できないといった制約がありますので、我々開発者は React Server Component の利点を十分に発揮するために、JavaScript を用いた状態管理を行う範囲を狭めることが求められています。このトークでは、CSS の :has() セレクターや、Popover API といった、従来は JavaScript を用いなければ提供できなかった機能を代替する方法を紹介します。"}};var j,K,M;L.parameters={...L.parameters,docs:{...(j=L.parameters)==null?void 0:j.docs,source:{originalSource:`{
  args: {
    eventTitle: "JSConf JP 2023",
    eventDate: "2023-11-19",
    presentationTitle: "JavaScript なしで動作するモダンなコードの書き方",
    presentationLink: "https://example.com/",
    description: "Next.js、Remix、SvelteKit といった近年のフレームワークは、JavaScript がなくても動作することを一つの価値として提供しています。例えばSvelteKit のフォームではプログレッシブエンハンスメントとして、JavaScript が利用できる環境ではリッチなユーザー体験を提供しつつ、JavaScript が使えない環境においては HTML のフォームとして振る舞うことでアプリケーションの機能を変わらず提供できます。 React Server Component はサーバー側で HTML に変換されるため、クライアントに JavaScript のコードが配信されることはありません。React Server Component では useState() を使用できないといった制約がありますので、我々開発者は React Server Component の利点を十分に発揮するために、JavaScript を用いた状態管理を行う範囲を狭めることが求められています。このトークでは、CSS の :has() セレクターや、Popover API といった、従来は JavaScript を用いなければ提供できなかった機能を代替する方法を紹介します。"
  }
}`,...(M=(K=L.parameters)==null?void 0:K.docs)==null?void 0:M.source}}};const te=["Default"];export{L as Default,te as __namedExportsOrder,ee as default};
//# sourceMappingURL=Timeline.stories-a48c8142.js.map
